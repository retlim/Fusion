<?php
/**
 * Fusion. A package manager for PHP-based projects.
 * Copyright Valvoid
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

namespace Valvoid\Fusion\Metadata\Normalizer;

use Valvoid\Fusion\Bus\Bus;
use Valvoid\Fusion\Bus\Events\Metadata as MetadataEvent;
use Valvoid\Fusion\Log\Events\Level;

/**
 * External meta source normalizer.
 *
 * @Copyright Valvoid
 * @license GNU GPLv3
 */
class Source
{
    /**
     * Normalizes source.
     *
     * @param array $category
     * @param array $sources
     */
    public static function normalize(array $category, array &$sources): void
    {
        foreach ($category as $entry)
            foreach ($entry as $path => $source) {

                // remove leading separator dirt
                // generated by loop
                $source = substr($source, 1);

                // unique self-source
                if ($path == "" && isset($sources[$path]))
                    Bus::broadcast(new MetadataEvent(
                        "Multi root source. Root source must be unique ($path - $source).",
                        Level::ERROR,
                        ["structure"],
                        [$path, $source]
                    ));

                // path conflict
                // folder and source have same parent or
                // redundant source ===
                // multi path
                foreach ($sources as $k => $v)
                    if (is_array($v))
                        foreach ($v as $p => $s) {
                            if (str_starts_with($path, $p) || str_starts_with($p, $path))
                                Bus::broadcast(new MetadataEvent(
                                    "Path conflict. Source and path must be in " .
                                    "different parent folder ($path - $source).",
                                    Level::ERROR,
                                    ["structure"],
                                    [$path, $source]
                                ));

                            if ($s == $source) {
                                Bus::broadcast(new MetadataEvent(
                                    "Redundant source.",
                                    Level::NOTICE,
                                    ["structure"],
                                    [$path, $source]
                                ));

                                // jump over
                                continue 3;
                            }
                        }

                    elseif ($path != $k && $k != "" && (str_starts_with($path, $k) || str_starts_with($k, $path)))
                        Bus::broadcast(new MetadataEvent(
                            "Path conflict. Source and path must be in " .
                            "different parent folder ($path - $source).",
                            Level::ERROR,
                            ["structure"],
                            [$path, $source]
                        ));

                    elseif ($v == $source) {
                        Bus::broadcast(new MetadataEvent(
                            "Redundant source.",
                            Level::NOTICE,
                            ["structure"],
                            [$path, $source]
                        ));

                        // jump over
                        continue 2;
                    }

                $sources[$path][] = $source;
            }
    }
}