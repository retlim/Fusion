variables:
  VERSION_TAG_REGEX: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  FILE: fusion-$CI_COMMIT_TAG.tar.gz

stages:
  - lint
  - test
  - deploy
  - image

# static tests
analyze code:
  stage: lint
  image:
    name: ghcr.io/phpstan/phpstan:2.1.6
    entrypoint: [""]
  script:
    - phpstan analyse -c phpstan.neon --error-format gitlab > phpstan.json
  artifacts:
    paths:
      - phpstan.json
    reports:
      codequality: phpstan.json

# test units and
# encapsulated integrations
test units:
  stage: test
  image: php:8.1.0
  coverage: /^Code\scoverage:\s\d{1,3}(?:\.\d{1,2})?\%/
  script:
    - php tests/units.php

# test integrations
# package as it is
test integrations:
  stage: test
  image: php:8.1.0
  rules:
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
  script:
    - php tests/integrations.php

# build data
replicate package:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
  script:
    - echo "MAJOR=$(echo "$CI_COMMIT_TAG" | cut -d'.' -f 1)" >> deploy.env
    - echo "MINOR=$(echo "$CI_COMMIT_TAG" | cut -d'.' -f 2)" >> deploy.env
    - echo "PATCH=$(echo "$CI_COMMIT_TAG" | cut -d'.' -f 3)" >> deploy.env
    - >
      git -C $CI_PROJECT_DIR archive $CI_COMMIT_TAG 
      --format=tar.gz 
      --prefix=fusion-$CI_COMMIT_TAG/ 
      --output=$FILE
  artifacts:
    paths:
      - $FILE
    reports:
      dotenv: deploy.env

create release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
  script:
    - echo "running release job for the tag \"$CI_COMMIT_TAG\"."
  needs:
    - job: replicate package
      artifacts: true
  release:
    tag_name: $CI_COMMIT_TAG
    assets:
      links:
        - name: Replica artifact (tar.gz)
          url: $CI_JOB_URL/artifacts/raw/$FILE
    description: |
      $CI_COMMIT_TAG_MESSAGE  
      
      ---
      Created by using the release-cli in:  
      [Pipeline]($CI_PIPELINE_URL) / [Job]($CI_JOB_URL)
  artifacts:
    expire_in: never
    paths:
      - $FILE

run docker pipeline:
  stage: image
  rules:
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
  variables:
    MAJOR: $MAJOR
    MINOR: $MINOR
    PATCH: $PATCH
  trigger:
    project: valvoid/fusion/php/docker
    branch: main